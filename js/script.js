$(document).ready(function() {

// I'm using the JavaScript Web Audio API to generate the Simon Game sounds

//Setting up the AudioContext and the 5 game sounds

    var audioCtx = new (window.AudioContext || window.webkitAudioContext)()

    var soundBlue = audioCtx.createOscillator();
        soundBlue.frequency.value = 196;
        soundBlue.type = "triangle";
        soundBlue.start();
    var soundGreen = audioCtx.createOscillator();
        soundGreen.frequency.value = 391;
        soundGreen.type = "triangle";
        soundGreen.start();
    var soundYellow = audioCtx.createOscillator();
        soundYellow.frequency.value = 261;
        soundYellow.type = "triangle";
        soundYellow.start();
    var soundRed = audioCtx.createOscillator();
        soundRed.frequency.value = 329;
        soundRed.type = "triangle";
        soundRed.start();
    var errorSound = audioCtx.createOscillator();
        errorSound.frequency.value = 210;
        errorSound.type = "triangle";
        errorSound.start();

    var sound = {
        blue : soundBlue,
        green: soundGreen,
        red: soundRed,
        yellow: soundYellow,
        error: errorSound
    };

    var startSequence = {
        1: "green",
        2: "red",
        3: "yellow",
        4: "blue"
    }

    var endSequence = {
        1: "blue",
        2: "yellow",
        3: "red",
        4: "green"
    }

    //Setting the sound sequence for 20 moves
        var counter = 0;
    
        var combination = {}; // combination of 20 sounds randomly generated by computer

        var playerSequence = []; //sequence introduced by the player

        var button_press = 0; //keeps track of how many times the player pressed a button

        var strict = 0; //strict mode is off at the beginning

        var start = 0; //indicates whether user started the game or just wants to try the keys, if start = 0 the sequence will not be checked
    
        var reset = 0; //variable used to give the start button also a reset function

        var sequenceNotPlaying = 1; //variable used to prevent button presses when the computer plays the sequence
        
        var colors = ["green", "red", "yellow", "blue"];

        var generateCombination = function(){
            for(i = 1; i < 21; i++){
                combination[i] = colors[Math.floor(Math.random() * 4)];
            }
        }
        
        generateCombination();
    
        var round = 0;

        var on = 0;

    
    var updateCounter = function(){
        if (counter < 10){
            $(".screen").html("0"+counter);
        } else {
            $(".screen").html(counter);
        }
    }

    var resetCounter = function(){
        counter = 0;
        $(".screen").html("0"+counter);
    }

    var switchOffCounter = function(){
        counter = 0;
        $(".screen").html("");
        $(".screen").toggleClass("screen__off");
    }
    
    
    var error = function(){
        //player should not be able to play tones at this time
        sequenceNotPlaying = 0;
        //activate error sound  
        errorSound.connect(audioCtx.destination);
        setTimeout(function() { 
            errorSound.disconnect(audioCtx.destination);  
          }, 1000);
          
        if (strict == 1){
            playerSequence = [];   
            button_press = 0;
            resetCounter();
            round = 0;
            sequenceNotPlaying = 1;
            $(".start__label").html("start");
            reset = 0;
            start = 0;
        } else {
            playerSequence = [];   
            button_press = 0;
            resetCounter();
            setTimeout(function() {
                round--; 
                playSequence(combination, round);
              }, 1500);
            
        }
        
    }
    

    var play = function(color, duration){

        
        var activeClass = color+"__active";
        var selector = "."+color;

    //after a set time (duration) desactivate the sound and remove the active class
      setTimeout(function() { 
        sound[color].disconnect(audioCtx.destination);  
        $(selector).removeClass(activeClass);
      }, duration);
     //activate sound and change color of button (by modifying class)    
        sound[color].connect(audioCtx.destination);
        $(selector).addClass(activeClass);

    }


var tone = 1;

var playSequence = function(comb, times) {
        
    playerSequence = [];
    button_press = 0;
    sequenceNotPlaying = 0;
    //DURATION changes depending on the round - like in the real game 

            if (round < 6){
                duration = 420;
            } else if (round < 13){
                duration = 320;
            } else {
                duration = 220;
            }
            if(comb == startSequence || comb == endSequence){
                duration = 100;
            }

    setTimeout(function () {    
       
       var sound = comb[tone];
       
       play(sound, duration);

       if(comb != startSequence && comb != endSequence){
        counter ++;
        updateCounter();
       }
        
                          
       if (times--) {            
          playSequence(comb, times);

          tone++;               
       } else {
           tone = 1;

           if (round <= 20 && comb != startSequence && comb != endSequence){
                round += 1;
            } else{
                round = 0;
            }
           sequenceNotPlaying = 1;
           
       }                       
    }, duration + 200)

 }
    
    $(".start__button").click(function(){


        if((on == 1) && (reset == 0)){
            start = 1;
            resetCounter();
            // playSequence();
            playSequence(combination, round); 
            $(".start__label").html("reset");
            reset = 1;
        } else if((reset == 1) && (start == 1)){
                $(".start__label").html("start");
                reset = 0;
                start = 0;
                generateCombination(); 
                playerSequence = [];   
                button_press = 0;
                resetCounter();
                round = 0;
        } else {} 


    
      
    });
    

    //PLAYER'S TURN:
    var checkSound = function(sound){
        if (sound != combination[button_press]){

            error();
        }
    }

    var checkSequence = function(sequence){

        var mistake = 0;
        for (var m = 1; m <= round; m++){
            if (sequence[m-1] != combination[m]){
                mistake = 1;
                error();
            
//VICTORY! THE PLAYER WINS!
            } else if((m == 20 && mistake == 0)){
                $(".announcement").css("opacity", "1");
                playSequence(endSequence, 3);

            } else if(m == round && mistake == 0){
                setTimeout(function(){
                    resetCounter();
                    playSequence(combination, round)
                }, 1000);
            }else{}
        }
        

    }

    //When the player pushes the buttons:


    $(".field").click(function(){
        if((on == 1) && (sequenceNotPlaying == 1)){

            if ($(this).hasClass("blue") && $(".blue").hasClass("on")){

                playerSequence.push("blue");
                play("blue", 300);
            } else if ($(this).hasClass("green") && $(this).hasClass("on")){
                playerSequence.push("green");
                play("green", 300);
            } else if ($(this).hasClass("yellow") && $(this).hasClass("on")){
                playerSequence.push("yellow");
                play("yellow", 300);
            } else if ($(this).hasClass("red") && $(this).hasClass("on")){
                playerSequence.push("red");
                play("red", 300);
            } else {}


            if(start == 1){
                if (button_press == 0){
                    resetCounter();
                }
                button_press ++;
                counter ++;
                updateCounter();
                setTimeout(checkSound(playerSequence[button_press-1]), 500);
            
                if (button_press == round){
                    sequenceNotPlaying = 0;
                    setTimeout(checkSequence(playerSequence), 500);
                }
            }
            
        } else {}
        
          
          
      });


    //toggle the ON / OFF button
    $(".slider").click(function(){

        if (on == 0){
            generateCombination();
            $(".slider__button").toggleClass("on");
            $(".screen").toggleClass("screen__off");
            $(".field").toggleClass("on");
            playSequence(startSequence, 3);
            on = 1;
            resetCounter();
            
        } else {
            $(".slider__button").toggleClass("on");
            $(".start__label").html("start");
            playSequence(endSequence, 3);
            on = 0;
            setTimeout(switchOffCounter, 2000);
            $(".field").toggleClass("on");
            if($(".strict__light").hasClass("light__active")){
                $(".strict__light").removeClass("light__active");
                strict = 0;
            }
            
            
        }
    });

    $(".strict__button").click(function(){
        if(on == 1){
            if(strict == 0){
                $(".strict__light").toggleClass("light__active");
                strict = 1;
            } else {
                $(".strict__light").toggleClass("light__active");
                strict = 0;
            }
            
        } 
    });
    
    
  });